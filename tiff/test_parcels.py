import unittest
import numpy
from tiff import parcels


class TestParcels(unittest.TestCase):
    def test_build_flanges(self):
        dataset = numpy.ones((20, 22))
        config = {
            "model": {
                "surface_thickness_millimeters": 1.0,
                "flange_thickness_millimeters": 1000.0,
            },
            "printer": {
                "xy_resolution_microns": 1000.0,
            }
        }
        parcel_shape = (7, 6)
        with_flanges = parcels.build_flanges(config, dataset, parcel_shape)
        expected = numpy.array([
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]).astype(numpy.float32)
        numpy.testing.assert_array_equal(with_flanges, expected)

    def test_parcels(self):
        dataset = numpy.arange(20 * 22).reshape(20, 22)
        actual = [parcel for index, parcel in parcels.parcels(dataset, (7, 6))]
        expected = [
            [[0, 1, 2, 3, 4, 5],
             [22, 23, 24, 25, 26, 27],
             [44, 45, 46, 47, 48, 49],
             [66, 67, 68, 69, 70, 71],
             [88, 89, 90, 91, 92, 93],
             [110, 111, 112, 113, 114, 115],
             [132, 133, 134, 135, 136, 137]],
            [[6, 7, 8, 9, 10, 11],
             [28, 29, 30, 31, 32, 33],
             [50, 51, 52, 53, 54, 55],
             [72, 73, 74, 75, 76, 77],
             [94, 95, 96, 97, 98, 99],
             [116, 117, 118, 119, 120, 121],
             [138, 139, 140, 141, 142, 143]],
            [[12, 13, 14, 15, 16, 17],
             [34, 35, 36, 37, 38, 39],
             [56, 57, 58, 59, 60, 61],
             [78, 79, 80, 81, 82, 83],
             [100, 101, 102, 103, 104, 105],
             [122, 123, 124, 125, 126, 127],
             [144, 145, 146, 147, 148, 149]],
            [[18, 19, 20, 21],
             [40, 41, 42, 43],
             [62, 63, 64, 65],
             [84, 85, 86, 87],
             [106, 107, 108, 109],
             [128, 129, 130, 131],
             [150, 151, 152, 153]],
            [[154, 155, 156, 157, 158, 159],
             [176, 177, 178, 179, 180, 181],
             [198, 199, 200, 201, 202, 203],
             [220, 221, 222, 223, 224, 225],
             [242, 243, 244, 245, 246, 247],
             [264, 265, 266, 267, 268, 269],
             [286, 287, 288, 289, 290, 291]],
            [[160, 161, 162, 163, 164, 165],
             [182, 183, 184, 185, 186, 187],
             [204, 205, 206, 207, 208, 209],
             [226, 227, 228, 229, 230, 231],
             [248, 249, 250, 251, 252, 253],
             [270, 271, 272, 273, 274, 275],
             [292, 293, 294, 295, 296, 297]],
            [[166, 167, 168, 169, 170, 171],
             [188, 189, 190, 191, 192, 193],
             [210, 211, 212, 213, 214, 215],
             [232, 233, 234, 235, 236, 237],
             [254, 255, 256, 257, 258, 259],
             [276, 277, 278, 279, 280, 281],
             [298, 299, 300, 301, 302, 303]],
            [[172, 173, 174, 175],
             [194, 195, 196, 197],
             [216, 217, 218, 219],
             [238, 239, 240, 241],
             [260, 261, 262, 263],
             [282, 283, 284, 285],
             [304, 305, 306, 307]],
            [[308, 309, 310, 311, 312, 313],
             [330, 331, 332, 333, 334, 335],
             [352, 353, 354, 355, 356, 357],
             [374, 375, 376, 377, 378, 379],
             [396, 397, 398, 399, 400, 401],
             [418, 419, 420, 421, 422, 423]],
            [[314, 315, 316, 317, 318, 319],
             [336, 337, 338, 339, 340, 341],
             [358, 359, 360, 361, 362, 363],
             [380, 381, 382, 383, 384, 385],
             [402, 403, 404, 405, 406, 407],
             [424, 425, 426, 427, 428, 429]],
            [[320, 321, 322, 323, 324, 325],
             [342, 343, 344, 345, 346, 347],
             [364, 365, 366, 367, 368, 369],
             [386, 387, 388, 389, 390, 391],
             [408, 409, 410, 411, 412, 413],
             [430, 431, 432, 433, 434, 435]],
            [[326, 327, 328, 329],
             [348, 349, 350, 351],
             [370, 371, 372, 373],
             [392, 393, 394, 395],
             [414, 415, 416, 417],
             [436, 437, 438, 439]]]

        self.assertEqual(len(actual), len(expected))
        for i in range(len(actual)):
            numpy.testing.assert_array_equal(actual[i], expected[i])


if __name__ == '__main__':
    unittest.main()
