import jsonschema
import json

schema = {
    "type": "object",
    "properties": {
        "support": {
            "type": "object",
            "properties": {
                # plot_input_surface plots the surface we're generating supports for.
                "plot_input_surface": {"type": "boolean"},
                # plot_surface_indices plots the indices we've generated by processing the surface we
                # are generating supports for.
                "plot_surface_indices": {"type": "boolean"},
                # plot_optimization_parameters plots various parameters populated by the solver.
                "plot_optimization_parameters": {"type": "boolean"},
            },
            "required": ["plot_input_surface", "plot_surface_indices"]
        },
    },
    "required": ["support"]
}

default = {
    "support": {
        "plot_input_surface": False,
        "plot_surface_indices": False,
        "plot_optimization_parameters": False,
    }
}


def load(path):
    """
    load loads and validates user-provided debug configuration from disk, filling
    in fields from the default set where the user did not set anything.
    :param path: path to user-provided debug configuration
    :return: user-provided debug configuration
    """
    if path is None:
        data = default
    else:
        with open(path) as f:
            loaded = json.load(f)
        data = {**default, **loaded}
    print(data)
    jsonschema.validate(instance=data, schema=schema)
    return data
